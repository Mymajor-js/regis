{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    super();\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n  // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n    this._timeout = (0, timers_1.setTimeout)(() => {\n      this._poll().catch(() => null);\n    }, this.intervalMS);\n  }\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n  failure() {\n    this.haMode = true;\n    this.schedule();\n  }\n  async _poll() {\n    const generation = this.generation;\n    let srvRecords;\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure();\n      return;\n    }\n    if (generation !== this.generation) {\n      return;\n    }\n    const finalAddresses = [];\n    for (const record of srvRecords) {\n      if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      }\n    }\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n    this.success(finalAddresses);\n  }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;","map":{"version":3,"names":["Object","defineProperty","exports","value","SrvPoller","SrvPollingEvent","dns","require","timers_1","error_1","mongo_types_1","utils_1","constructor","srvRecords","hostnames","Set","map","r","HostAddress","fromSrvRecord","toString","TypedEventEmitter","options","srvHost","MongoRuntimeError","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","haMode","generation","_timeout","undefined","srvAddress","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","catch","success","emit","SRV_RECORD_DISCOVERY","failure","promises","resolveSrv","dnsError","finalAddresses","record","matchesParentDomain","name","push","length"],"sources":["D:/web_project/node_modules/mongodb/lib/sdam/srv_polling.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;\n//# sourceMappingURL=srv_polling.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}