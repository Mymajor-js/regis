{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference() {\n    return this.mode;\n  }\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options) {\n    if (!options) return;\n    const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n    if (readPreference == null) {\n      return;\n    }\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk() {\n    const NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReadPreference","ReadPreferenceMode","error_1","require","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","constructor","mode","tags","options","isValid","MongoInvalidArgumentError","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","preference","fromString","fromOptions","readPreference","session","transaction","readPreferenceTags","translate","r","VALID_MODES","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","secondaryOk","NEEDS_SECONDARYOK","equals","toJSON"],"sources":["D:/web_project/node_modules/mongodb/lib/read_preference.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;\n//# sourceMappingURL=read_preference.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,kBAAkB,GAAG,KAAK,CAAC;AAC5D,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC;AACAL,OAAO,CAACG,kBAAkB,GAAGL,MAAM,CAACQ,MAAM,CAAC;EACvCC,OAAO,EAAE,SAAS;EAClBC,gBAAgB,EAAE,kBAAkB;EACpCC,SAAS,EAAE,WAAW;EACtBC,kBAAkB,EAAE,oBAAoB;EACxCC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMT,cAAc,CAAC;EACjB;AACJ;AACA;AACA;AACA;EACIU,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;IAC7B,IAAI,CAACb,cAAc,CAACc,OAAO,CAACH,IAAI,CAAC,EAAE;MAC/B,MAAM,IAAIT,OAAO,CAACa,yBAAyB,CAAE,gCAA+BC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAE,EAAC,CAAC;IACvG;IACA,IAAIE,OAAO,IAAI,IAAI,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;MACrEC,OAAO,GAAGD,IAAI;MACdA,IAAI,GAAGQ,SAAS;IACpB,CAAC,MACI,IAAIR,IAAI,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;MACnC,MAAM,IAAIV,OAAO,CAACa,yBAAyB,CAAC,sCAAsC,CAAC;IACvF;IACA,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACS,KAAK,GAAGR,OAAO,EAAEQ,KAAK;IAC3B,IAAI,CAACC,mBAAmB,GAAGF,SAAS;IACpC,IAAI,CAACG,cAAc,GAAGH,SAAS;IAC/BP,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIA,OAAO,CAACS,mBAAmB,IAAI,IAAI,EAAE;MACrC,IAAIT,OAAO,CAACS,mBAAmB,IAAI,CAAC,EAAE;QAClC,MAAM,IAAIpB,OAAO,CAACa,yBAAyB,CAAC,gDAAgD,CAAC;MACjG;MACA,IAAI,CAACO,mBAAmB,GAAGT,OAAO,CAACS,mBAAmB;MACtD;MACA;MACA,IAAI,CAACC,cAAc,GAAG,CAAC;IAC3B;IACA,IAAI,IAAI,CAACZ,IAAI,KAAKX,cAAc,CAACwB,OAAO,EAAE;MACtC,IAAI,IAAI,CAACZ,IAAI,IAAIM,KAAK,CAACC,OAAO,CAAC,IAAI,CAACP,IAAI,CAAC,IAAI,IAAI,CAACA,IAAI,CAACa,MAAM,GAAG,CAAC,EAAE;QAC/D,MAAM,IAAIvB,OAAO,CAACa,yBAAyB,CAAC,sDAAsD,CAAC;MACvG;MACA,IAAI,IAAI,CAACO,mBAAmB,EAAE;QAC1B,MAAM,IAAIpB,OAAO,CAACa,yBAAyB,CAAC,qEAAqE,CAAC;MACtH;MACA,IAAI,IAAI,CAACM,KAAK,EAAE;QACZ,MAAM,IAAInB,OAAO,CAACa,yBAAyB,CAAC,uDAAuD,CAAC;MACxG;IACJ;EACJ;EACA;EACA,IAAIW,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACf,IAAI;EACpB;EACA,OAAOgB,UAAUA,CAAChB,IAAI,EAAE;IACpB,OAAO,IAAIX,cAAc,CAACW,IAAI,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOiB,WAAWA,CAACf,OAAO,EAAE;IACxB,IAAI,CAACA,OAAO,EACR;IACJ,MAAMgB,cAAc,GAAGhB,OAAO,CAACgB,cAAc,IAAIhB,OAAO,CAACiB,OAAO,EAAEC,WAAW,CAAClB,OAAO,CAACgB,cAAc;IACpG,MAAMG,kBAAkB,GAAGnB,OAAO,CAACmB,kBAAkB;IACrD,IAAIH,cAAc,IAAI,IAAI,EAAE;MACxB;IACJ;IACA,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;MACpC,OAAO,IAAI7B,cAAc,CAAC6B,cAAc,EAAEG,kBAAkB,EAAE;QAC1DV,mBAAmB,EAAET,OAAO,CAACS,mBAAmB;QAChDD,KAAK,EAAER,OAAO,CAACQ;MACnB,CAAC,CAAC;IACN,CAAC,MACI,IAAI,EAAEQ,cAAc,YAAY7B,cAAc,CAAC,IAAI,OAAO6B,cAAc,KAAK,QAAQ,EAAE;MACxF,MAAMlB,IAAI,GAAGkB,cAAc,CAAClB,IAAI,IAAIkB,cAAc,CAACH,UAAU;MAC7D,IAAIf,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAClC,OAAO,IAAIX,cAAc,CAACW,IAAI,EAAEkB,cAAc,CAACjB,IAAI,IAAIoB,kBAAkB,EAAE;UACvEV,mBAAmB,EAAEO,cAAc,CAACP,mBAAmB;UACvDD,KAAK,EAAER,OAAO,CAACQ;QACnB,CAAC,CAAC;MACN;IACJ;IACA,IAAIW,kBAAkB,EAAE;MACpBH,cAAc,CAACjB,IAAI,GAAGoB,kBAAkB;IAC5C;IACA,OAAOH,cAAc;EACzB;EACA;AACJ;AACA;EACI,OAAOI,SAASA,CAACpB,OAAO,EAAE;IACtB,IAAIA,OAAO,CAACgB,cAAc,IAAI,IAAI,EAC9B,OAAOhB,OAAO;IAClB,MAAMqB,CAAC,GAAGrB,OAAO,CAACgB,cAAc;IAChC,IAAI,OAAOK,CAAC,KAAK,QAAQ,EAAE;MACvBrB,OAAO,CAACgB,cAAc,GAAG,IAAI7B,cAAc,CAACkC,CAAC,CAAC;IAClD,CAAC,MACI,IAAIA,CAAC,IAAI,EAAEA,CAAC,YAAYlC,cAAc,CAAC,IAAI,OAAOkC,CAAC,KAAK,QAAQ,EAAE;MACnE,MAAMvB,IAAI,GAAGuB,CAAC,CAACvB,IAAI,IAAIuB,CAAC,CAACR,UAAU;MACnC,IAAIf,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAClCE,OAAO,CAACgB,cAAc,GAAG,IAAI7B,cAAc,CAACW,IAAI,EAAEuB,CAAC,CAACtB,IAAI,EAAE;UACtDU,mBAAmB,EAAEY,CAAC,CAACZ;QAC3B,CAAC,CAAC;MACN;IACJ,CAAC,MACI,IAAI,EAAEY,CAAC,YAAYlC,cAAc,CAAC,EAAE;MACrC,MAAM,IAAIE,OAAO,CAACa,yBAAyB,CAAE,4BAA2BmB,CAAE,EAAC,CAAC;IAChF;IACA,OAAOrB,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;EACI,OAAOC,OAAOA,CAACH,IAAI,EAAE;IACjB,MAAMwB,WAAW,GAAG,IAAIC,GAAG,CAAC,CACxBpC,cAAc,CAACwB,OAAO,EACtBxB,cAAc,CAACqC,iBAAiB,EAChCrC,cAAc,CAACsC,SAAS,EACxBtC,cAAc,CAACuC,mBAAmB,EAClCvC,cAAc,CAACwC,OAAO,EACtB,IAAI,CACP,CAAC;IACF,OAAOL,WAAW,CAACM,GAAG,CAAC9B,IAAI,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;EACIG,OAAOA,CAACH,IAAI,EAAE;IACV,OAAOX,cAAc,CAACc,OAAO,CAAC,OAAOH,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC;EAC9E;EACA;AACJ;AACA;AACA;EACI+B,WAAWA,CAAA,EAAG;IACV,MAAMC,iBAAiB,GAAG,IAAIP,GAAG,CAAC,CAC9BpC,cAAc,CAACqC,iBAAiB,EAChCrC,cAAc,CAACsC,SAAS,EACxBtC,cAAc,CAACuC,mBAAmB,EAClCvC,cAAc,CAACwC,OAAO,CACzB,CAAC;IACF,OAAOG,iBAAiB,CAACF,GAAG,CAAC,IAAI,CAAC9B,IAAI,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;EACIiC,MAAMA,CAACf,cAAc,EAAE;IACnB,OAAOA,cAAc,CAAClB,IAAI,KAAK,IAAI,CAACA,IAAI;EAC5C;EACA;EACAkC,MAAMA,CAAA,EAAG;IACL,MAAMhB,cAAc,GAAG;MAAElB,IAAI,EAAE,IAAI,CAACA;IAAK,CAAC;IAC1C,IAAIO,KAAK,CAACC,OAAO,CAAC,IAAI,CAACP,IAAI,CAAC,EACxBiB,cAAc,CAACjB,IAAI,GAAG,IAAI,CAACA,IAAI;IACnC,IAAI,IAAI,CAACU,mBAAmB,EACxBO,cAAc,CAACP,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;IACjE,IAAI,IAAI,CAACD,KAAK,EACVQ,cAAc,CAACR,KAAK,GAAG,IAAI,CAACA,KAAK;IACrC,OAAOQ,cAAc;EACzB;AACJ;AACA7B,cAAc,CAACwB,OAAO,GAAG1B,OAAO,CAACG,kBAAkB,CAACI,OAAO;AAC3DL,cAAc,CAACqC,iBAAiB,GAAGvC,OAAO,CAACG,kBAAkB,CAACK,gBAAgB;AAC9EN,cAAc,CAACsC,SAAS,GAAGxC,OAAO,CAACG,kBAAkB,CAACM,SAAS;AAC/DP,cAAc,CAACuC,mBAAmB,GAAGzC,OAAO,CAACG,kBAAkB,CAACO,kBAAkB;AAClFR,cAAc,CAACwC,OAAO,GAAG1C,OAAO,CAACG,kBAAkB,CAACQ,OAAO;AAC3DT,cAAc,CAACK,OAAO,GAAG,IAAIL,cAAc,CAACF,OAAO,CAACG,kBAAkB,CAACI,OAAO,CAAC;AAC/EL,cAAc,CAACM,gBAAgB,GAAG,IAAIN,cAAc,CAACF,OAAO,CAACG,kBAAkB,CAACK,gBAAgB,CAAC;AACjGN,cAAc,CAACO,SAAS,GAAG,IAAIP,cAAc,CAACF,OAAO,CAACG,kBAAkB,CAACM,SAAS,CAAC;AACnFP,cAAc,CAACQ,kBAAkB,GAAG,IAAIR,cAAc,CAACF,OAAO,CAACG,kBAAkB,CAACO,kBAAkB,CAAC;AACrGR,cAAc,CAACS,OAAO,GAAG,IAAIT,cAAc,CAACF,OAAO,CAACG,kBAAkB,CAACQ,OAAO,CAAC;AAC/EX,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}