{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.maybeCallback = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.isHostMatch = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n  toLocalBufferType(buffer) {\n    return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n  equals(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n  compare(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n  toBase64(uint8array) {\n    return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n  for (const wildcard of wildcards) {\n    if (host === wildcard || wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length)) || wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length))) {\n      return true;\n    }\n  }\n  return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n  return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n  return {\n    ...target,\n    ...source\n  };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n  // Filtered options\n  return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n  return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n  return !!value && typeof value.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n  if (command.explain) {\n    return command;\n  }\n  return {\n    explain: command,\n    verbosity: explain.verbosity\n  };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider && provider.client.topology) {\n    return provider.client.topology;\n  }\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection;\n    this.collection = collection === '' ? undefined : collection;\n  }\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n  withCollection(collection) {\n    return new MongoDBCollectionNamespace(this.db, collection);\n  }\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n  constructor(db, collection) {\n    super(db, collection);\n    this.collection = collection;\n  }\n  static fromString(namespace) {\n    return super.fromString(namespace);\n  }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n  const promise = promiseFn();\n  if (callback == null) {\n    return promise;\n  }\n  promise.then(result => callback(undefined, result), error => callback(error));\n  return;\n}\nexports.maybeCallback = maybeCallback;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n  return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n  function eachCallback(err) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n  return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n  const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n  return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n  if (!isObject(value)) {\n    return false;\n  }\n  const ctor = value.constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n  return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n  const ctor = value.constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value);\n      case 'set':\n        return new Set(value);\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n  return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n  get length() {\n    return this.count;\n  }\n  get [Symbol.toStringTag]() {\n    return 'List';\n  }\n  constructor() {\n    this.count = 0;\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    };\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  toArray() {\n    return Array.from(this);\n  }\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n  *[Symbol.iterator]() {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n  *nodes() {\n    let ptr = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const {\n        next\n      } = ptr;\n      yield ptr;\n      ptr = next;\n    }\n  }\n  /** Insert at end of list */\n  push(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head,\n      prev: this.head.prev,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n  /** Insert at front of list */\n  unshift(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head.next,\n      prev: this.head,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n  remove(node) {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n    this.count -= 1;\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n    return node.value;\n  }\n  /** Removes the first node at the front of the list */\n  shift() {\n    return this.remove(this.head.next);\n  }\n  /** Removes the last node at the end of the list */\n  pop() {\n    return this.remove(this.head.prev);\n  }\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n  clear() {\n    this.count = 0;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  /** Returns the first item in the list, does not remove */\n  first() {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n  /** Returns the last item in the list, does not remove */\n  last() {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n  get length() {\n    return this.totalByteLength;\n  }\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer) {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32() {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n    return value;\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size) {\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n    for (let bytesRead = 0; bytesRead < size;) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n      result.set(bytes, bytesRead);\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n    return result;\n  }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n  constructor(hostString) {\n    this.host = undefined;\n    this.port = undefined;\n    this.socketPath = undefined;\n    this.isIPv6 = false;\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new url_1.URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n    const hostname = url.hostname;\n    const port = url.port;\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n    this.host = normalized.toLowerCase();\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n    if (this.port === 0) {\n      throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new HostAddress('${this.toString()}')`;\n  }\n  toString() {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n  static fromSrvRecord({\n    name,\n    port\n  }) {\n    return HostAddress.fromHostPort(name, port);\n  }\n  toHostPort() {\n    if (this.socketPath) {\n      return {\n        host: this.socketPath,\n        port: 0\n      };\n    }\n    const host = this.host ?? '';\n    const port = this.port ?? 0;\n    return {\n      host,\n      port\n    };\n  }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n  return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n  if (oid1 == null) {\n    return -1;\n  }\n  if (oid2 == null) {\n    return 1;\n  }\n  return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n  const parsedInt = parseInteger(value);\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n  // Remove trailing dot if exists on either the resolved address or the srv hostname\n  const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n  const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n  const allCharacterBeforeFirstDot = /^.*?\\./;\n  // Remove all characters before first dot\n  // Add leading dot back to string so\n  //   an srvHostDomain = '.trusted.site'\n  //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n  const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n  const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n  return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n  return new Promise((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n    req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */\nclass TimeoutController extends AbortController {\n  constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(() => this.abort(), timeout) : null) {\n    super();\n    this.timeoutId = timeoutId;\n  }\n  clear() {\n    if (this.timeoutId != null) {\n      (0, timers_1.clearTimeout)(this.timeoutId);\n    }\n    this.timeoutId = null;\n  }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n  return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;","map":{"version":3,"names":["Object","defineProperty","exports","value","DOCUMENT_DB_CHECK","TimeoutController","request","matchesParentDomain","parseUnsignedInteger","parseInteger","compareObjectId","commandSupportsReadConcern","shuffle","supportsRetryableWrites","enumToString","emitWarningOnce","emitWarning","MONGODB_WARNING_CODE","DEFAULT_PK_FACTORY","HostAddress","BufferPool","List","deepCopy","isRecord","setDifference","isHello","isSuperset","resolveOptions","hasAtomicOperators","calculateDurationInMs","now","makeStateMachine","errorStrictEqual","arrayStrictEqual","eachAsync","maxWireVersion","uuidV4","maybeCallback","makeCounter","MongoDBCollectionNamespace","MongoDBNamespace","ns","getTopology","decorateWithExplain","decorateWithReadConcern","decorateWithCollation","isPromiseLike","applyRetryableWrites","filterOptions","mergeOptions","isObject","normalizeHintField","hostMatchesWildcards","ByteUtils","isHostMatch","COSMOS_DB_MSG","DOCUMENT_DB_MSG","COSMOS_DB_CHECK","crypto","require","http","timers_1","url","url_1","bson_1","constants_1","constants_2","error_1","read_concern_1","read_preference_1","common_1","write_concern_1","toLocalBufferType","buffer","Buffer","isBuffer","from","byteOffset","byteLength","equals","seqA","seqB","compare","toBase64","uint8array","toString","host","wildcards","wildcard","startsWith","endsWith","substring","length","hint","finalHint","undefined","Array","isArray","forEach","param","name","TO_STRING","object","prototype","call","arg","target","source","options","names","includes","db","s","retryWrites","then","command","capabilities","collation","commandsTakeCollation","MongoCompatibilityError","coll","session","inTransaction","readConcern","assign","keys","explain","verbosity","provider","topology","client","MongoNotConnectedError","fromString","constructor","collection","withCollection","namespace","MongoRuntimeError","collectionParts","split","join","seed","count","newCount","promiseFn","callback","promise","result","error","randomBytes","topologyOrServer","loadBalanced","MAX_SUPPORTED_WIRE_VERSION","hello","lastHello","description","arr","eachFn","idx","awaiting","eachCallback","err","arr2","every","elt","lhs","rhs","message","stateTable","stateTransition","newState","legalStates","state","indexOf","emit","hrtime","process","Math","floor","started","MongoInvalidArgumentError","elapsed","doc","document","parent","resolveBSONOptions","ReadConcern","fromOptions","writeConcern","WriteConcern","readPreference","ReadPreference","set","subset","Set","elem","has","LEGACY_HELLO_COMMAND","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","requiredKeys","ctor","map","item","res","key","toLowerCase","Number","Map","Symbol","toStringTag","head","next","prev","toArray","iterator","node","nodes","ptr","push","newNode","pushMany","iterable","unshift","remove","prevNode","nextNode","shift","pop","prune","filter","clear","first","last","buffers","totalByteLength","append","getInt32","firstBuffer","readInt32LE","top4Bytes","read","size","alloc","allocUnsafe","bytesRead","bytesRemaining","bytesReadable","min","bytes","subarray","hostString","port","socketPath","isIPv6","escapedHost","decodeURIComponent","urlString","URL","urlError","runtimeError","cause","hostname","normalized","parseInt","MongoParseError","freeze","for","inspect","fromHostPort","fromSrvRecord","toHostPort","createPk","ObjectId","code","emittedWarnings","add","en","values","server","logicalSessionTimeoutMinutes","type","ServerType","Standalone","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","slice","aggregate","distinct","find","geoNear","oid1","oid2","id","trunc","parsedValue","String","isNaN","parsedInt","address","srvHost","normalizedAddress","normalizedSrvHost","allCharacterBeforeFirstDot","addressDomain","replace","srvHostDomain","uri","Promise","resolve","reject","requestOptions","method","timeout","json","parse","req","setEncoding","data","on","d","once","parsed","JSON","destroy","MongoNetworkTimeoutError","end","AbortController","timeoutId","setTimeout","abort","clearTimeout","match","test"],"sources":["D:/web_project/node_modules/mongodb/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.maybeCallback = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.isHostMatch = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return !!value && typeof value.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return { explain: command, verbosity: explain.verbosity };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n    const promise = promiseFn();\n    if (callback == null) {\n        return promise;\n    }\n    promise.then(result => callback(undefined, result), error => callback(error));\n    return;\n}\nexports.maybeCallback = maybeCallback;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced) {\n            // Since we do not have a monitor, we assume the load balanced server is always\n            // pointed at the latest mongodb version. There is a risk that for on-prem\n            // deployments that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n    arr = arr || [];\n    let idx = 0;\n    let awaiting = 0;\n    for (idx = 0; idx < arr.length; ++idx) {\n        awaiting++;\n        eachFn(arr[idx], eachCallback);\n    }\n    if (awaiting === 0) {\n        callback();\n        return;\n    }\n    function eachCallback(err) {\n        awaiting--;\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (idx === arr.length && awaiting <= 0) {\n            callback();\n        }\n    }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */\nclass TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(() => this.abort(), timeout) : null) {\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;\n//# sourceMappingURL=utils.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}