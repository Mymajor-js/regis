{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"./common\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n  return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter(s => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n  return (topologyDescription, servers) => {\n    if (!description) return [];\n    // Filter the servers to match the provided description only if\n    // the type is not unknown.\n    return servers.filter(sd => {\n      return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n    });\n  };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n  // If server version < 5.0, read preference always primary.\n  // If server version >= 5.0...\n  // - If read preference is supplied, use that.\n  // - If no read preference is supplied, use primary.\n  if (!readPreference || !wireVersion || wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n    return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n  }\n  return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n  const maxStaleness = readPreference.maxStalenessSeconds;\n  const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n  if (maxStaleness < maxStalenessVariance) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n  }\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n  }\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n    const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n    return servers.reduce((result, server) => {\n      const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n      return result;\n    }, []);\n  }\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n    if (servers.length === 0) {\n      return servers;\n    }\n    const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n    return servers.reduce((result, server) => {\n      const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n      return result;\n    }, []);\n  }\n  return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n  const keys = Object.keys(tagSet);\n  const serverTagKeys = Object.keys(serverTags);\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n  if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n    return servers;\n  }\n  for (let i = 0; i < readPreference.tags.length; ++i) {\n    const tagSet = readPreference.tags[i];\n    const serversMatchingTagset = servers.reduce((matched, server) => {\n      if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n      return matched;\n    }, []);\n    if (serversMatchingTagset.length) {\n      return serversMatchingTagset;\n    }\n  }\n  return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n  const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n  const high = low + topologyDescription.localThresholdMS;\n  return servers.reduce((result, server) => {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n}\n// filters\nfunction primaryFilter(server) {\n  return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n  return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n  return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n  if (!readPreference.isValid()) {\n    throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n  }\n  return (topologyDescription, servers) => {\n    const commonWireVersion = topologyDescription.commonWireVersion;\n    if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n      throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n      return servers.filter(loadBalancerFilter);\n    }\n    if (topologyDescription.type === common_1.TopologyType.Unknown) {\n      return [];\n    }\n    if (topologyDescription.type === common_1.TopologyType.Single || topologyDescription.type === common_1.TopologyType.Sharded) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n    const mode = readPreference.mode;\n    if (mode === read_preference_1.ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n    if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n      const result = servers.filter(primaryFilter);\n      if (result.length) {\n        return result;\n      }\n    }\n    const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n    const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n    if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n      return servers.filter(primaryFilter);\n    }\n    return selectedServers;\n  };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;","map":{"version":3,"names":["Object","defineProperty","exports","value","readPreferenceServerSelector","secondaryWritableServerSelector","sameServerSelector","writableServerSelector","MIN_SECONDARY_WRITE_WIRE_VERSION","error_1","require","read_preference_1","common_1","IDLE_WRITE_PERIOD","SMALLEST_MAX_STALENESS_SECONDS","topologyDescription","servers","latencyWindowReducer","filter","s","isWritable","description","sd","address","type","ServerType","Unknown","wireVersion","readPreference","ReadPreference","primary","maxStalenessReducer","maxStalenessSeconds","maxStaleness","maxStalenessVariance","heartbeatFrequencyMS","MongoInvalidArgumentError","TopologyType","ReplicaSetWithPrimary","Array","from","values","primaryFilter","reduce","result","server","stalenessMS","lastUpdateTime","lastWriteDate","staleness","push","ReplicaSetNoPrimary","length","sMax","max","tagSetMatch","tagSet","serverTags","keys","serverTagKeys","i","key","indexOf","tagSetReducer","tags","isArray","serversMatchingTagset","matched","low","min","roundTripTime","Math","high","localThresholdMS","RSPrimary","secondaryFilter","RSSecondary","nearestFilter","knownFilter","loadBalancerFilter","LoadBalancer","isValid","commonWireVersion","minWireVersion","MongoCompatibilityError","LoadBalanced","Single","Sharded","mode","PRIMARY","PRIMARY_PREFERRED","NEAREST","selectedServers","SECONDARY_PREFERRED"],"sources":["D:/web_project/node_modules/mongodb/lib/sdam/server_selection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"./common\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return (topologyDescription, servers) => {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return (topologyDescription, servers) => {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single ||\n            topologyDescription.type === common_1.TopologyType.Sharded) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n//# sourceMappingURL=server_selection.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}