{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = require(\"util\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(client, seeds, options) {\n    super();\n    this.client = client;\n    this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n  detectShardedTopology(event) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ?? {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const exitWithError = error => callback ? callback(error) : this.emit(Topology.ERROR, error);\n    const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({\n          force: false\n        }, () => exitWithError(err));\n      }\n      // TODO: NODE-2471\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          callback?.(undefined, this);\n        });\n        return;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      callback?.(undefined, this);\n    });\n  }\n  close(options, callback) {\n    options = options ?? {\n      force: false\n    };\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return callback?.();\n    }\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return (0, util_1.promisify)(destroyServer)(server, this, {\n        force: !!options?.force\n      });\n    });\n    Promise.all(destroyedServers).then(() => {\n      this.s.servers.clear();\n      stateTransition(this, common_1.STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n      (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n        this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      }\n      this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n      stateTransition(this, common_1.STATE_CLOSED);\n      // emit an event for close\n      this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }).finally(() => callback?.());\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback,\n      timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS)\n    };\n    waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n      waitQueueMember[kCancelled] = true;\n      waitQueueMember.timeoutController.clear();\n      const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n      waitQueueMember.callback(timeoutError);\n    });\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n  options = options ?? {\n    force: false\n  };\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options?.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options?.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options?.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    waitQueueMember.timeoutController.clear();\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      waitQueueMember.timeoutController.clear();\n      waitQueueMember.callback(e);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    waitQueueMember.timeoutController.clear();\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["Object","defineProperty","exports","value","ServerCapabilities","Topology","util_1","require","connection_string_1","constants_1","error_1","mongo_types_1","read_preference_1","utils_1","common_1","events_1","server_1","server_description_1","server_selection_1","srv_polling_1","topology_description_1","globalTopologyCounter","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kCancelled","Symbol","kWaitQueue","TypedEventEmitter","constructor","client","seeds","options","selectServerAsync","promisify","selector","callback","selectServer","hosts","HostAddress","fromString","fromEntries","DEFAULT_OPTIONS","entries","FEATURE_FLAGS","Array","isArray","seedlist","seed","push","MongoRuntimeError","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","shuffle","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","List","s","id","state","description","TopologyDescription","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","srvHost","loadBalanced","srvPoller","SrvPoller","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","TopologyDescriptionChangedEvent","capabilities","lastHello","connect","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","exitWithError","error","ERROR","readPreference","ReadPreference","primary","readPreferenceServerSelector","err","server","close","force","skipPingOnConnect","for","command","ns","ping","OPEN","CONNECT","destroyedServers","destroyServer","Promise","all","then","clear","drainWaitQueue","MongoTopologyClosedError","drainTimerQueue","stop","removeListener","TOPOLOGY_CLOSED","TopologyClosedEvent","finally","serverSelector","translate","assign","isSharded","session","transaction","waitQueueMember","timeoutController","TimeoutController","signal","addEventListener","timeoutError","MongoServerSelectionError","processWaitQueue","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","auth","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","ServerType","result","maxWireVersion","commonWireVersion","logicalSessionTimeoutMinutes","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","topology","LOCAL_SERVER_EVENTS","removeAllListeners","destroy","ServerClosedEvent","SERVER_RELAY_EVENTS","directConnection","Single","ReplicaSetNoPrimary","LoadBalanced","ServerOpeningEvent","Server","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","MongoError","hasErrorLabel","MongoErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","pool","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","shift","membersToProcess","i","selectedDescriptions","selectedServer","descriptions","server1","server2","operationCount","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["D:/web_project/node_modules/mongodb/lib/sdam/topology.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = require(\"util\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n            if (err) {\n                return this.close({ force: false }, () => exitWithError(err));\n            }\n            // TODO: NODE-2471\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}, err => {\n                    if (err) {\n                        return exitWithError(err);\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    close(options, callback) {\n        options = options ?? { force: false };\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback?.();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), server => {\n            return (0, util_1.promisify)(destroyServer)(server, this, { force: !!options?.force });\n        });\n        Promise.all(destroyedServers)\n            .then(() => {\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        })\n            .finally(() => callback?.());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options ?? { force: false };\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            waitQueueMember.timeoutController.clear();\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}