{"ast":null,"code":"var _jsxFileName = \"D:\\\\web_project\\\\anusmo\\\\src\\\\component\\\\insertdata.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport ExcelJS from 'exceljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExcelExport() {\n  _s();\n  const [data, setData] = useState({\n    column1: '',\n    column2: '',\n    column3: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleSaveToExcel = async () => {\n    // สร้าง workbook ใหม่\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Sheet1');\n\n    // เพิ่มข้อมูลลงใน worksheet\n    worksheet.addRow(['Column1', 'Column2', 'Column3']);\n    worksheet.addRow([data.column1, data.column2, data.column3]);\n\n    // แปลง workbook เป็น Blob\n    const excelBlob = await workbook.xlsx.writeBuffer();\n\n    // สร้าง FormData เพื่อส่งไปยัง API หรือบันทึกไฟล์ในเครื่อง\n    const formData = new FormData();\n    formData.append('file', new Blob([excelBlob]), 'data.xlsx');\n\n    // ทำการ POST ไฟล์ Excel โดยใช้ Axios\n    try {\n      const response = await axios.post('/api/save-excel', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('File saved successfully:', response);\n    } catch (error) {\n      console.error('Error saving file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"column1\",\n      placeholder: \"Column 1\",\n      value: data.column1,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"column2\",\n      placeholder: \"Column 2\",\n      value: data.column2,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"column3\",\n      placeholder: \"Column 3\",\n      value: data.column3,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveToExcel,\n      children: \"Save to Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(ExcelExport, \"QbmmKM6CfpiVKDTRVQE6Kpjxi40=\");\n_c = ExcelExport;\nexport default ExcelExport;\nvar _c;\n$RefreshReg$(_c, \"ExcelExport\");","map":{"version":3,"names":["React","useState","axios","ExcelJS","jsxDEV","_jsxDEV","ExcelExport","_s","data","setData","column1","column2","column3","handleChange","e","name","value","target","prevData","handleSaveToExcel","workbook","Workbook","worksheet","addWorksheet","addRow","excelBlob","xlsx","writeBuffer","formData","FormData","append","Blob","response","post","headers","console","log","error","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/web_project/anusmo/src/component/insertdata.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport ExcelJS from 'exceljs';\r\n\r\nfunction ExcelExport() {\r\n  const [data, setData] = useState({\r\n    column1: '',\r\n    column2: '',\r\n    column3: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSaveToExcel = async () => {\r\n    // สร้าง workbook ใหม่\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet('Sheet1');\r\n\r\n    // เพิ่มข้อมูลลงใน worksheet\r\n    worksheet.addRow(['Column1', 'Column2', 'Column3']);\r\n    worksheet.addRow([data.column1, data.column2, data.column3]);\r\n\r\n    // แปลง workbook เป็น Blob\r\n    const excelBlob = await workbook.xlsx.writeBuffer();\r\n\r\n    // สร้าง FormData เพื่อส่งไปยัง API หรือบันทึกไฟล์ในเครื่อง\r\n    const formData = new FormData();\r\n    formData.append('file', new Blob([excelBlob]), 'data.xlsx');\r\n\r\n    // ทำการ POST ไฟล์ Excel โดยใช้ Axios\r\n    try {\r\n      const response = await axios.post('/api/save-excel', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      console.log('File saved successfully:', response);\r\n    } catch (error) {\r\n      console.error('Error saving file:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        name=\"column1\"\r\n        placeholder=\"Column 1\"\r\n        value={data.column1}\r\n        onChange={handleChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"column2\"\r\n        placeholder=\"Column 2\"\r\n        value={data.column2}\r\n        onChange={handleChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"column3\"\r\n        placeholder=\"Column 3\"\r\n        value={data.column3}\r\n        onChange={handleChange}\r\n      />\r\n      <button onClick={handleSaveToExcel}>Save to Excel</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExcelExport;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}