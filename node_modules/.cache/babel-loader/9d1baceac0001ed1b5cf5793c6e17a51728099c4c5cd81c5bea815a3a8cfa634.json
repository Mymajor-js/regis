{"ast":null,"code":"'use strict';\n\nmodule.exports = applyEmbeddedDiscriminators;\nfunction applyEmbeddedDiscriminators(schema, seen = new WeakSet()) {\n  if (seen.has(schema)) {\n    return;\n  }\n  seen.add(schema);\n  for (const path of Object.keys(schema.paths)) {\n    const schemaType = schema.paths[path];\n    if (!schemaType.schema) {\n      continue;\n    }\n    applyEmbeddedDiscriminators(schemaType.schema, seen);\n    if (!schemaType.schema._applyDiscriminators) {\n      continue;\n    }\n    if (schemaType._appliedDiscriminators) {\n      continue;\n    }\n    for (const discriminatorKey of schemaType.schema._applyDiscriminators.keys()) {\n      const discriminatorSchema = schemaType.schema._applyDiscriminators.get(discriminatorKey);\n      applyEmbeddedDiscriminators(discriminatorSchema, seen);\n      schemaType.discriminator(discriminatorKey, discriminatorSchema);\n    }\n    schemaType._appliedDiscriminators = true;\n  }\n}","map":{"version":3,"names":["module","exports","applyEmbeddedDiscriminators","schema","seen","WeakSet","has","add","path","Object","keys","paths","schemaType","_applyDiscriminators","_appliedDiscriminators","discriminatorKey","discriminatorSchema","get","discriminator"],"sources":["D:/web_project/node_modules/mongoose/lib/helpers/discriminator/applyEmbeddedDiscriminators.js"],"sourcesContent":["'use strict';\n\nmodule.exports = applyEmbeddedDiscriminators;\n\nfunction applyEmbeddedDiscriminators(schema, seen = new WeakSet()) {\n  if (seen.has(schema)) {\n    return;\n  }\n  seen.add(schema);\n  for (const path of Object.keys(schema.paths)) {\n    const schemaType = schema.paths[path];\n    if (!schemaType.schema) {\n      continue;\n    }\n    applyEmbeddedDiscriminators(schemaType.schema, seen);\n    if (!schemaType.schema._applyDiscriminators) {\n      continue;\n    }\n    if (schemaType._appliedDiscriminators) {\n      continue;\n    }\n    for (const discriminatorKey of schemaType.schema._applyDiscriminators.keys()) {\n      const discriminatorSchema = schemaType.schema._applyDiscriminators.get(discriminatorKey);\n      applyEmbeddedDiscriminators(discriminatorSchema, seen);\n      schemaType.discriminator(discriminatorKey, discriminatorSchema);\n    }\n    schemaType._appliedDiscriminators = true;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,2BAA2B;AAE5C,SAASA,2BAA2BA,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAAC,EAAE;EACjE,IAAID,IAAI,CAACE,GAAG,CAACH,MAAM,CAAC,EAAE;IACpB;EACF;EACAC,IAAI,CAACG,GAAG,CAACJ,MAAM,CAAC;EAChB,KAAK,MAAMK,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACP,MAAM,CAACQ,KAAK,CAAC,EAAE;IAC5C,MAAMC,UAAU,GAAGT,MAAM,CAACQ,KAAK,CAACH,IAAI,CAAC;IACrC,IAAI,CAACI,UAAU,CAACT,MAAM,EAAE;MACtB;IACF;IACAD,2BAA2B,CAACU,UAAU,CAACT,MAAM,EAAEC,IAAI,CAAC;IACpD,IAAI,CAACQ,UAAU,CAACT,MAAM,CAACU,oBAAoB,EAAE;MAC3C;IACF;IACA,IAAID,UAAU,CAACE,sBAAsB,EAAE;MACrC;IACF;IACA,KAAK,MAAMC,gBAAgB,IAAIH,UAAU,CAACT,MAAM,CAACU,oBAAoB,CAACH,IAAI,CAAC,CAAC,EAAE;MAC5E,MAAMM,mBAAmB,GAAGJ,UAAU,CAACT,MAAM,CAACU,oBAAoB,CAACI,GAAG,CAACF,gBAAgB,CAAC;MACxFb,2BAA2B,CAACc,mBAAmB,EAAEZ,IAAI,CAAC;MACtDQ,UAAU,CAACM,aAAa,CAACH,gBAAgB,EAAEC,mBAAmB,CAAC;IACjE;IACAJ,UAAU,CAACE,sBAAsB,GAAG,IAAI;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}