{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n  [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n  [exports.TxnState.STARTING_TRANSACTION]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_IN_PROGRESS]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_COMMITTED]: [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]\n};\nconst ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nconst COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n  /** Create a transaction @internal */\n  constructor(options) {\n    options = options ?? {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n      this.options.writeConcern = writeConcern;\n    }\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n  get server() {\n    return this._pinnedServer;\n  }\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n  get isPinned() {\n    return !!this.server;\n  }\n  /** @returns Whether the transaction has started */\n  get isStarting() {\n    return this.state === exports.TxnState.STARTING_TRANSACTION;\n  }\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n  get isActive() {\n    return ACTIVE_STATES.has(this.state);\n  }\n  get isCommitted() {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n      if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n        this.unpinServer();\n      }\n      return;\n    }\n    throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n  /** @internal */\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n  /** @internal */\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;","map":{"version":3,"names":["Object","defineProperty","exports","value","isTransactionCommand","Transaction","TxnState","error_1","require","read_concern_1","read_preference_1","write_concern_1","freeze","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","stateMachine","ACTIVE_STATES","Set","COMMITTED_STATES","constructor","options","state","writeConcern","WriteConcern","fromOptions","w","MongoTransactionError","readConcern","ReadConcern","readPreference","ReadPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","server","recoveryToken","isPinned","isStarting","isActive","has","isCommitted","transition","nextState","nextStates","includes","unpinServer","MongoRuntimeError","pinServer","command","commitTransaction","abortTransaction"],"sources":["D:/web_project/node_modules/mongodb/lib/transactions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}